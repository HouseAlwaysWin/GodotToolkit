@page "/"
@using System.Text.RegularExpressions;
@using GodotToolkit.Generator;
@using GodotToolkit.Shared.Dialogs;
@using System.Text;
@inject IFolderPicker _folderPicker
@inject IDialogService _dialogService
@inject IConfigServices _configService
@inject LocalizationService _localization

<MudGrid Justify="Justify.FlexStart">


    <MudItem xs="9">
        <MudTextField @bind-Value="GodotProjectPath"
                      Label="@Lang["Godot Project Path"]"
                      ReadOnly="true"
                      Variant="Variant.Text"></MudTextField>
    </MudItem>

    <MudItem xs="3" Class="mt-auto">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="px-2"
                   OnClick="SetGodotProjectFolderPath">@Lang["Set Path"]</MudButton>
    </MudItem>

    <MudItem xs="12" Class="mt-auto">
        <MudAutocomplete T="string"
                         Label="@Lang["Select tscn file"]"
                         Value="@TscnFileName"
                         FullWidth="true"
                         ValueChanged="OnSelectedTscnFile"
                         SearchFunc="@SearchTscn"
                         DebounceInterval="800"
                         ResetValueOnEmptyText="true"
                         CoerceText="true"
                         CoerceValue="true"
                         AdornmentColor="Color.Primary" />
    </MudItem>
    @if (IsLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }


    @if (!string.IsNullOrWhiteSpace(TscnFileName))
    {
        <MudItem xs="12" Class="mt-auto">
            <MudExpansionPanels>

                <MudExpansionPanel Text="@(Lang["C# Initialized Nodes"])">
                    @{
                        var templateName = "NodeInitializedTemplate";
                    }
                    <MudItem xs="12" Class="mt-auto">

                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="12">
                                <MudButtonGroup Color="Color.Primary"
                                                Variant="Variant.Filled">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@DisableBuildTemplatesButton"
                                               OnClick="@(()=>BuildTemplate(templateName))">
                                        @(Lang["Build Code"])
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@DisableBuildTemplatesButton"
                                               OnClick="@(()=>OutputScript(templateName))">
                                        @(Lang["Code Output"])
                                    </MudButton>
                                </MudButtonGroup>
                            </MudItem>

                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" Class="mt-auto">
                        @if (TemplateInfo.ContainsKey(templateName))
                        {
                            var templateInfo = TemplateInfo[templateName];
                            if (!string.IsNullOrWhiteSpace(templateInfo.HtmlContent))
                            {
                                <MudPaper Class="mud-theme-dark overflow-auto text-break">
                                    <MudContainer Style="height: 500px;  color: ghostwhite">
                                        @((MarkupString)templateInfo?.HtmlContent)
                                    </MudContainer>
                                </MudPaper>
                            }
                        }
                    </MudItem>
                </MudExpansionPanel>

                <MudExpansionPanel Text="@(Lang["C# OnReady Nodes Init"])">
                    @{
                        var templateName = "NodeOnReadyTemplate";
                    }
                    <MudItem xs="12" Class="mt-auto">

                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="12">
                                <MudButtonGroup Color="Color.Primary"
                                                Variant="Variant.Filled">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@DisableBuildTemplatesButton"
                                               OnClick="@(()=>BuildTemplate(templateName))">
                                        @(Lang["Build Code"])
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@DisableBuildTemplatesButton"
                                               OnClick="@(()=>OutputScript(templateName))">
                                        @(Lang["Code Output"])
                                    </MudButton>
                                </MudButtonGroup>
                            </MudItem>

                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" Class="mt-auto">
                        @if (TemplateInfo.ContainsKey(templateName))
                        {
                            var templateInfo = TemplateInfo[templateName];
                            if (!string.IsNullOrWhiteSpace(templateInfo.HtmlContent))
                            {
                                <MudPaper Class="mud-theme-dark overflow-auto text-break">
                                    <MudContainer Style="height: 500px;  color: ghostwhite">
                                        @((MarkupString)templateInfo?.HtmlContent)
                                    </MudContainer>
                                </MudPaper>
                            }
                        }
                    </MudItem>
                </MudExpansionPanel>

                <MudExpansionPanel Text="@(Lang["C# AutoLoad OnReady Init"])">
                    @{
                        var templateName = "AutoLoadTemplate";
                    }
                    <MudItem xs="12" Class="mt-auto">

                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="12">
                                <MudButtonGroup Color="Color.Primary"
                                                Variant="Variant.Filled">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@DisableBuildTemplatesButton"
                                               OnClick="@(()=>BuildTemplate(templateName))">
                                        @(Lang["Build Code"])
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@DisableBuildTemplatesButton"
                                               OnClick="@(()=>OutputScript(templateName))">
                                        @(Lang["Code Output"])
                                    </MudButton>
                                </MudButtonGroup>
                            </MudItem>

                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" Class="mt-auto">
                        @if (TemplateInfo.ContainsKey(templateName))
                        {
                            var templateInfo = TemplateInfo[templateName];
                            if (!string.IsNullOrWhiteSpace(templateInfo.HtmlContent))
                            {
                                <MudPaper Class="mud-theme-dark overflow-auto text-break">
                                    <MudContainer Style="height: 500px;  color: ghostwhite">
                                        @((MarkupString)templateInfo?.HtmlContent)
                                    </MudContainer>
                                </MudPaper>
                            }
                        }
                    </MudItem>
                </MudExpansionPanel>

            </MudExpansionPanels>
        </MudItem>
    }

</MudGrid>

@code {
    /// <summary>
    ///
    /// </summary>
    string GodotProjectPath { get; set; }

    string TscnFileName { get; set; }

    List<TscnFileInfo> TscnFileList { get; set; } = new List<TscnFileInfo>();

    bool DisableBuildTemplatesButton = false;

    bool IsLoading = false;

    string CurrentVersion { get; set; } = "Godot-v4.2.1";

    public Dictionary<string, TemplateConfigs> TemplateInfo { get; set; } = new Dictionary<string, TemplateConfigs>();


    /// <summary>
    /// Config Settings
    /// </summary>
    public JsonNode Config { get; set; }

    public LangInfo Lang { get; set; }

    public TemplateInput TemplateInput { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Config = _configService.GetConfig();
        GodotProjectPath = Config.ToValue("GodotProjectPath");

        Lang = _localization.InitLang((lang) =>
        {
            Lang = lang;
            StateHasChanged();
        });

        CheckedTscnFileList();
    }

    public void CheckedTscnFileList()
    {
        if (Directory.Exists(GodotProjectPath))
        {
            TscnFileList.Clear();
            SearchTscnFiles(GodotProjectPath);
        }
    }

    public async void SetGodotProjectFolderPath()
    {
        try
        {
            var godotProjectPath = _folderPicker.PickFolder();
            if (Directory.Exists(godotProjectPath))
            {
                GodotProjectPath = godotProjectPath;
                Config["GodotProjectPath"] = GodotProjectPath;
                _configService.UpdateConfig(Config);
                CheckedTscnFileList();
            }
        }
        catch (DirectoryNotFoundException ex)
        {
            await _dialogService.ShowMessageBox("Message", "Can't find the path");
        }
        catch (Exception ex)
        {
            await _dialogService.ShowMessageBox("Error Message", ex.ToString());
            _configService.ClearConfig();
        }
    }

    public async Task OnSelectedTscnFile(object value)
    {
        try
        {
            TemplateInfo.Clear();
            this.TscnFileName = value?.ToString();
            Config.AsObject()["TscnFileName"] = TscnFileName;
            _configService.UpdateConfig(Config);
        }
        catch (FileNotFoundException ex)
        {
            await _dialogService.ShowMessageBox("Message", "File doesn't exist.");
        }
        catch (Exception ex)
        {
            await _dialogService.ShowMessageBox("Error Message", ex.ToString());
        }
    }

    public void SearchTscnFiles(string folder)
    {
        string[] files = Directory.GetFiles(folder, "*.tscn");
        foreach (string file in files)
        {
            TscnFileList.Add(new TscnFileInfo
                {
                    FileName = Path.GetFileName(file),
                    FileFullPath = file,
                    FileFolderName = Directory.GetParent(file)?.Name
                });
        }

        string[] subFolders = Directory.GetDirectories(folder);
        foreach (string subFolder in subFolders)
        {
            SearchTscnFiles(subFolder);
        }
    }


    private async Task<IEnumerable<string>> SearchTscn(string tscnName)
    {

        return await Task.Run(() =>
        {
            if (string.IsNullOrEmpty(tscnName))
            {
                return TscnFileList.Select(f => $@"{f.FileFolderName}/{f.FileName}").ToList();
            }
            return TscnFileList.Select(f => $@"{f.FileFolderName}/{f.FileName}").Where(x => x.Contains(tscnName, StringComparison.InvariantCultureIgnoreCase));
        });
    }

    public async Task BuildTemplate(string templateName)
    {
        IsLoading = true;
        try
        {
            await Task.Run(async () =>
            {
                if (TemplateInfo.ContainsKey(templateName))
                {
                    TemplateInfo[templateName] = new TemplateConfigs();
                }
                else
                {
                    TemplateInfo.Add(templateName, new TemplateConfigs());
                }

                var tscnPath = TscnFileList.FirstOrDefault(f => $@"{f.FileFolderName}/{f.FileName}" == TscnFileName);
                if (tscnPath != null)
                {
                    TemplateInput = new TemplateInput(GodotProjectPath, tscnPath.FileFullPath);
                    var templateInfo = await CodeGenerator.BuildTemplate(templateName, CurrentVersion, new TemplateConfigs
                        {
                            InputParameter = TemplateInput
                        });

                    TemplateInfo[templateName] = templateInfo;
                }
            }).ContinueWith((templateInfo) =>
            {
                if (templateInfo.IsCompleted)
                {
                    IsLoading = false;
                }

                if (templateInfo.IsFaulted)
                {
                    throw templateInfo.Exception;
                }
            });
        }
        catch (Exception ex)
        {
            await _dialogService.ShowMessageBox(Lang["Error"], ex.ToString());
        }
    }


    public async Task OutputScript(string templateName)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", this.Lang[$@"Are you sure ouput file?"]);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await _dialogService.Show<BasicDialog>(Lang["Message"], parameters, options).Result;

        if (!dialog.Canceled)
        {
            try
            {
                await BuildTemplate(templateName);
                var path = this.TemplateInput.TscnParser.TscnFile.ExtResource.FirstOrDefault(e => e.ResourceType == "Script")?.Path.Replace("res://", $@"{GodotProjectPath}/");

                if (!string.IsNullOrWhiteSpace(path))
                {

                    var tempInfo = TemplateInfo[templateName];
                    var existContent = new StringBuilder(File.ReadAllText(path));
                    existContent.AppendLine(tempInfo.Content);
                    File.WriteAllText(path, existContent.ToString());

                    await _dialogService.ShowMessageBox(Lang["Message"], Lang["Output File Successed"]);
                }
                else
                {
                    await _dialogService.ShowMessageBox(Lang["Message"], Lang["Output file's path can't be empty"]);
                }

            }
            catch (Exception ex)
            {
                await _dialogService.ShowMessageBox(Lang["Error Occured"], ex.ToString());
            }
        }
    }

}