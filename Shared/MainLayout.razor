@using GodotToolkit.Extensions;
@using GodotToolkit.Services;
@using MudBlazor.Utilities;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Text;
@using System.Text.Unicode;
@using System.Text.Json.Serialization;
@using System.Reflection;
@using System.Diagnostics;
@inherits LayoutComponentBase
@inject IConfigServices _configService
@inject NavigationManager NavigationManager;
@inject LocalizationService _localization

<MudThemeProvider IsDarkMode="IsDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />

        <MudIconButton Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" OnClick="@OnDarkModeToggle" />
        <MudMenu Label="@(Lang["Set Lang"]?.ToString())">
            <MudMenuItem OnClick="@(()=>SetLangs("en"))">英文</MudMenuItem>
            <MudMenuItem OnClick="@(()=>SetLangs("zh-tw"))">中文</MudMenuItem>
        </MudMenu>




    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Toolkit List</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large" Class="pt-4">
            @Body
        </MudContainer>
    </MudMainContent>

    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
    </MudScrollToTop>
</MudLayout>
@code {
    bool _drawerOpen = false;
    private static Process _openVSCodeProccess;

    public bool _themeManagerOpen = false;
    public bool IsDarkMode = false;
    JsonNode _config;

    public JsonObject Lang { get; set; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }


    /// <summary>
    /// 改變模式
    /// </summary>
    /// <param name="value"></param>
    void OnDarkModeToggle()
    {
        IsDarkMode = !IsDarkMode;
        _config["IsDarkMode"] = IsDarkMode;
        _configService.UpdateConfig(_config);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _config = _configService.GetConfig();
        IsDarkMode = true;
        var defaultPath = _config.ToValue("DefaultPath");
        if (!string.IsNullOrWhiteSpace(defaultPath))
        {
            NavigationManager.NavigateTo(defaultPath);
        }

        var currentLang = _config.ToValue("CurrentLang");
        SetLangs(currentLang);
        Lang = _localization.InitLang((lang) =>
        {
            Lang = lang;
            StateHasChanged();
        });

        StateHasChanged();
    }

    public void SetLangs(string code)
    {
        _localization.SetLocalization(code);
        _config.AsObject()["CurrentLang"] = code;
        _configService.UpdateConfig(_config);
    }
}
